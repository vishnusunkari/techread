{"componentChunkName":"component---src-templates-docs-js","path":"/aws/01-aws-organizations","result":{"data":{"site":{"siteMetadata":{"title":"TechGry","docsLocation":""}},"mdx":{"fields":{"id":"636d52f7-b31b-5212-8462-e544b6114e7a","title":"AWS Organizations","slug":"/aws/01-aws-organizations"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"AWS Organizations\",\n  \"metaTitle\": \"AWS Organizations\",\n  \"metaDescription\": \"What is AWS Organizations. AWS Organizations is an account management service on AWS  that allows you to consolidate multiple AWS accounts into a single organization.\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"AWS Organizations (Multi-Account Management)\"), mdx(\"p\", null, \"What is AWS Organizations. When you have multiple AWS accounts, it is a challenge to manage these accounts individually.\\nEach account has its own billing, access management, security, and compliance requirements. AWS Organizations\\nis an account management service that allows you to consolidate multiple AWS accounts into a single organization.\\nEnable All Features before you create SCPs (Service Control Policy).\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"One Master Account, Mulitple Member Accounts.\\nRoot -> OU -> Account -> OU -> Account.\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"SCPs are applied downward hierarchically.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SCPs applied to Master Account do nothing.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"SCPs do not grant permissions instead restrict existing permissions an account has.  \")), mdx(\"h3\", null, \"AWS Organization Modes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consolidated Billing (default), \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All Features  \")), mdx(\"h3\", null, \"Features\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Centralized Management of all your AWS Accounts\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Consolidated billing for all member accounts\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Hierarchical grouping of your accounts (OUs, SCP (Service Control Policy) )\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Control over AWS Services and API actions\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Integration and support for AWS IAM\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Eventually, consistent data replication\")), mdx(\"h3\", null, \"New Account Creation\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Invite account (Send an email to Root account which should be accepted)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create Account directly.\")), mdx(\"p\", null, \"SCPs (Service Control Policy) DO NOT affect any service-linked role. Service-linked roles enable other AWS services to integrate with\\nAWS Organizations and can't be restricted by SCPs.\"), mdx(\"h3\", null, \"ResourceAccessManager (RAM)\"), mdx(\"p\", null, \"Where AWS resources can be shared across accounts within Organization as well as outside\\nOrganization.  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Owner and Participant.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"em\", {\n    parentName: \"li\"\n  }, \"All Features\"), \" mode need to be enabled.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Participant does not have to accept as long as the checkbox in RAM services is checked while sharing to the participant.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Enables you to share specified AWS resources that you own with other AWS accounts.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"To enable trusted access with AWS Organizations:\\nFrom the AWS RAM CLI, use the enable-sharing-with-aws-organizations command.\\nIAM service-linked role that can be created in accounts when trusted access is enabled: AWSResourceAccessManagerServiceRolePolicy.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You can use trusted access to enable an AWS service that you specify, called the trusted service, that can create an IAM role\\ncalled service-linked role in accounts of your organization to perform tasks in your organization and its accounts\\non your behalf.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Only the Root User has access to Billing dashboard.  No admin users donot have access to billing. You can add billing admin users\\nto have users access billing info.\")), mdx(\"p\", null, \"Q. How to provide a way for admins in master account to have access to stop, delete and/or terminate resources in both\\ndevelopment and test environment accounts?\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"A. First, create IAM users in the master account. Then in the Dev and Test accounts, generate cross-account roles that have\\nfull admin permissions while granting access for the master account is correct because the cross-account role is created\\nin Dev and Test accounts, and the users are created in the Master account that are given that role.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#aws-organizations-multi-account-management","title":"AWS Organizations (Multi-Account Management)"},{"url":"#aws-organization-modes","title":"AWS Organization Modes"},{"url":"#features","title":"Features"},{"url":"#new-account-creation","title":"New Account Creation"},{"url":"#resourceaccessmanager-ram","title":"ResourceAccessManager (RAM)"}]},"parent":{"__typename":"File","relativePath":"aws/01-aws-organizations.md"},"frontmatter":{"metaTitle":"AWS Organizations","metaDescription":"What is AWS Organizations. AWS Organizations is an account management service on AWS  that allows you to consolidate multiple AWS accounts into a single organization."}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/concepts","title":"RealWorld Concepts"}}},{"node":{"fields":{"slug":"/aws","title":"AWS"}}},{"node":{"fields":{"slug":"/java","title":"Java"}}},{"node":{"fields":{"slug":"/kafka","title":"Kafka Concepts"}}},{"node":{"fields":{"slug":"/pages/about-me","title":"Vishnu Sunkari"}}},{"node":{"fields":{"slug":"/pages/about","title":"About TechGry"}}},{"node":{"fields":{"slug":"/pages/disclaimer","title":"Disclaimer"}}},{"node":{"fields":{"slug":"/pages/privacypolicy","title":"Privacy Policy"}}},{"node":{"fields":{"slug":"/pages/terms-and-conditions","title":"Terms and Conditions"}}},{"node":{"fields":{"slug":"/kafka/03-kafka-producers","title":"Producers"}}},{"node":{"fields":{"slug":"/kafka/01-kafka-topics-partitions-offsets","title":"Topics,Partitions & Offsets"}}},{"node":{"fields":{"slug":"/kafka/04-kafka-consumers","title":"Kafka Consumers"}}},{"node":{"fields":{"slug":"/kafka/05-kafka-consumer-offsets-delivery","title":"Consumer Offsets and Delivery Semantics"}}},{"node":{"fields":{"slug":"/kafka/02-kafka-brokers","title":"Brokers"}}},{"node":{"fields":{"slug":"/kafka/06-kafka-broker-discovery-zookeeper","title":"Kafka Broker Discovery and Zookeeper"}}},{"node":{"fields":{"slug":"/kafka/00-what-is-kafka","title":"What is Kafka"}}},{"node":{"fields":{"slug":"/kafka/07-kafka-guarantees","title":"Kafka Guarantees"}}},{"node":{"fields":{"slug":"/kafka/08-kafka-concepts-summary","title":"Kafka Concepts Summary"}}},{"node":{"fields":{"slug":"/kafka/09-kafka-how-to-build-distributed-scalable-system","title":"How to build distributed scalable system with Kafka"}}},{"node":{"fields":{"slug":"/java/00-java-classloaders","title":"Java ClassLoaders"}}},{"node":{"fields":{"slug":"/java/01-java-functional-programming","title":"Functional Programming"}}},{"node":{"fields":{"slug":"/concepts/00-rotation-strategy","title":"Rotate Monthly"}}},{"node":{"fields":{"slug":"/concepts/03-access-spring-beans","title":"Spring Beans"}}},{"node":{"fields":{"slug":"/concepts/01-apis-security","title":"API Security"}}},{"node":{"fields":{"slug":"/concepts/02-maxLifetime","title":"Fix HikariPool"}}},{"node":{"fields":{"slug":"/aws/00-aws-iam","title":"IAM"}}},{"node":{"fields":{"slug":"/aws/01-aws-organizations","title":"AWS Organizations"}}},{"node":{"fields":{"slug":"/aws/02-aws-config","title":"AWS Config"}}},{"node":{"fields":{"slug":"/aws/03-aws-service-catalog","title":"AWS Service Catalog"}}},{"node":{"fields":{"slug":"/aws/04-aws-systems-manager","title":"AWS Systems Manager"}}},{"node":{"fields":{"slug":"/aws/05-aws-elastic-load-balancing","title":"Elastic Load Balancing"}}},{"node":{"fields":{"slug":"/aws/06-aws-autoscaling","title":"Autoscaling"}}},{"node":{"fields":{"slug":"/aws/07-aws-placement-groups","title":"Placement Groups"}}},{"node":{"fields":{"slug":"/aws/08-aws-cloudfront","title":"CloudFront"}}},{"node":{"fields":{"slug":"/aws/09-aws-route53","title":"Route53"}}},{"node":{"fields":{"slug":"/aws/10-aws-s3","title":"S3"}}},{"node":{"fields":{"slug":"/aws/12-aws-rdsaurora","title":"RDS Aurora"}}},{"node":{"fields":{"slug":"/aws/13-aws-cloudformation","title":"CloudFormation"}}},{"node":{"fields":{"slug":"/aws/11-aws-efs","title":"EFS"}}},{"node":{"fields":{"slug":"/aws/14-aws-opsworks","title":"OpsWorks"}}},{"node":{"fields":{"slug":"/aws/15-aws-elasticbeanstalk","title":"Elastic Beanstalk"}}},{"node":{"fields":{"slug":"/","title":"Technology Learning"}}},{"node":{"fields":{"slug":"/concepts/04-save-queue-data-on-to-disk","title":"Saving Queue Data on to Disk"}}},{"node":{"fields":{"slug":"/kubernetes","title":"Kubernetes Concepts"}}},{"node":{"fields":{"slug":"/kubernetes/01-more-pods-on-nodes","title":"How to deploy more pods on kubernetes nodes"}}}]}},"pageContext":{"id":"636d52f7-b31b-5212-8462-e544b6114e7a"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}