{"componentChunkName":"component---src-templates-docs-js","path":"/kafka/05-kafka-consumer-offsets-delivery","result":{"data":{"site":{"siteMetadata":{"title":"TechGry","docsLocation":""}},"mdx":{"fields":{"id":"19a6b28a-88b2-5cf9-b4ff-b7fef10a00f9","title":"Consumer Offsets and Delivery Semantics","slug":"/kafka/05-kafka-consumer-offsets-delivery"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Consumer Offsets and Delivery Semantics\",\n  \"metaTitle\": \"Kafka Consumer Offsets, process of committing the offsets. What if a consumer dies? Delivery Semantics for consumers\",\n  \"metaDescription\": \"Kafka stores the offsets at which a consumer group has been reading. The offsets  committed live in a Kafka topic named _consumer_offsets. Delivery Semantics for Consumers : Atmost once, Atleast once, Exactly once\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Consumer Offsets\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Kafka stores the offsets at which a consumer group has been reading.      \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"The offsets committed live in a Kafka topic named _consumer_offsets.    \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When a consumer in a group has processed data received from Kafka, it\\nshould be committing the offsets.    \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If a consumer dies, it will be able to read back from where it left off\\nthanks to the committed consumer offsets!    \")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"                                                       -----------------------\\n              -------------------Commited offset ------|                     | \\n              |                                        |                     |\\n              |                                        |                     | \\n--------------|----------------------------------------|   Consumer from     |\\n| 4258 | 4259 | 4260 | 4261 | 4262 | 4263 |            |   Consumer Group    |\\n--------------|----------------------------------------|                     |\\n              |                                        |                     |\\n              |                                        |                     |\\n              -------------------Reads---------------->|                     |\\n                                                       -----------------------\\n\")), mdx(\"h3\", null, \"Delivery Semantics for Consumers\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Consumers choose when to commit offsets    \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"There are 3 delivery semantics :    \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Atmost once:     \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"offsets are committed as soon as the message is received    \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the processing goes wrong, the message will be lost(it won't be read again)    \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Atleast once:     \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"offsets are committed after the message is processed.    \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If the processing goes wrong, the message will be read again.    \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"This can result in duplicate processing of messages. Make sure your processing is\\nidempotent(ie processing again the messages won't impact your systems)    \"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Exactly once:     \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Can be achieved for Kafka -> Kafka workflows using Kafka Streams API       \")))))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#consumer-offsets","title":"Consumer Offsets"},{"url":"#delivery-semantics-for-consumers","title":"Delivery Semantics for Consumers"}]},"parent":{"__typename":"File","relativePath":"kafka/05-kafka-consumer-offsets-delivery.mdx"},"frontmatter":{"metaTitle":"Kafka Consumer Offsets, process of committing the offsets. What if a consumer dies? Delivery Semantics for consumers","metaDescription":"Kafka stores the offsets at which a consumer group has been reading. The offsets  committed live in a Kafka topic named _consumer_offsets. Delivery Semantics for Consumers : Atmost once, Atleast once, Exactly once"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/concepts","title":"RealWorld Concepts"}}},{"node":{"fields":{"slug":"/java","title":"Java"}}},{"node":{"fields":{"slug":"/aws","title":"AWS"}}},{"node":{"fields":{"slug":"/kafka","title":"Kafka Concepts"}}},{"node":{"fields":{"slug":"/kubernetes","title":"Kubernetes Concepts"}}},{"node":{"fields":{"slug":"/pages/about","title":"About TechGry"}}},{"node":{"fields":{"slug":"/pages/terms-and-conditions","title":"Terms and Conditions"}}},{"node":{"fields":{"slug":"/pages/disclaimer","title":"Disclaimer"}}},{"node":{"fields":{"slug":"/kafka/00-what-is-kafka","title":"What is Kafka"}}},{"node":{"fields":{"slug":"/pages/privacypolicy","title":"Privacy Policy"}}},{"node":{"fields":{"slug":"/kafka/02-kafka-brokers","title":"Brokers"}}},{"node":{"fields":{"slug":"/kubernetes/01-more-pods-on-nodes","title":"How to deploy more pods on kubernetes nodes"}}},{"node":{"fields":{"slug":"/kafka/03-kafka-producers","title":"Producers"}}},{"node":{"fields":{"slug":"/kafka/04-kafka-consumers","title":"Kafka Consumers"}}},{"node":{"fields":{"slug":"/kafka/01-kafka-topics-partitions-offsets","title":"Topics,Partitions & Offsets"}}},{"node":{"fields":{"slug":"/kafka/05-kafka-consumer-offsets-delivery","title":"Consumer Offsets and Delivery Semantics"}}},{"node":{"fields":{"slug":"/kafka/09-kafka-how-to-build-distributed-scalable-system","title":"How to build distributed scalable system with Kafka"}}},{"node":{"fields":{"slug":"/kafka/07-kafka-guarantees","title":"Kafka Guarantees"}}},{"node":{"fields":{"slug":"/kafka/08-kafka-concepts-summary","title":"Kafka Concepts Summary"}}},{"node":{"fields":{"slug":"/java/01-java-functional-programming","title":"Functional Programming"}}},{"node":{"fields":{"slug":"/kafka/06-kafka-broker-discovery-zookeeper","title":"Kafka Broker Discovery and Zookeeper"}}},{"node":{"fields":{"slug":"/java/00-java-classloaders","title":"Java ClassLoaders"}}},{"node":{"fields":{"slug":"/concepts/00-rotation-strategy","title":"Rotate Monthly"}}},{"node":{"fields":{"slug":"/concepts/01-apis-security","title":"API Security"}}},{"node":{"fields":{"slug":"/concepts/02-maxLifetime","title":"Fix HikariPool"}}},{"node":{"fields":{"slug":"/concepts/03-access-spring-beans","title":"Spring Beans"}}},{"node":{"fields":{"slug":"/concepts/04-save-queue-data-on-to-disk","title":"Saving Queue Data on to Disk"}}},{"node":{"fields":{"slug":"/aws/01-aws-organizations","title":"AWS Organizations"}}},{"node":{"fields":{"slug":"/aws/03-aws-service-catalog","title":"AWS Service Catalog"}}},{"node":{"fields":{"slug":"/aws/04-aws-systems-manager","title":"AWS Systems Manager"}}},{"node":{"fields":{"slug":"/aws/00-aws-iam","title":"IAM"}}},{"node":{"fields":{"slug":"/aws/02-aws-config","title":"AWS Config"}}},{"node":{"fields":{"slug":"/aws/05-aws-elastic-load-balancing","title":"Elastic Load Balancing"}}},{"node":{"fields":{"slug":"/aws/06-aws-autoscaling","title":"Autoscaling"}}},{"node":{"fields":{"slug":"/aws/07-aws-placement-groups","title":"Placement Groups"}}},{"node":{"fields":{"slug":"/aws/08-aws-cloudfront","title":"CloudFront"}}},{"node":{"fields":{"slug":"/aws/09-aws-route53","title":"Route53"}}},{"node":{"fields":{"slug":"/aws/10-aws-s3","title":"S3"}}},{"node":{"fields":{"slug":"/aws/11-aws-efs","title":"EFS"}}},{"node":{"fields":{"slug":"/aws/15-aws-elasticbeanstalk","title":"Elastic Beanstalk"}}},{"node":{"fields":{"slug":"/aws/14-aws-opsworks","title":"OpsWorks"}}},{"node":{"fields":{"slug":"/aws/13-aws-cloudformation","title":"CloudFormation"}}},{"node":{"fields":{"slug":"/aws/12-aws-rdsaurora","title":"RDS Aurora"}}},{"node":{"fields":{"slug":"/security","title":"Security"}}},{"node":{"fields":{"slug":"/security/01-aws-private-ca-private-key","title":"AWS Private CA Private Key"}}},{"node":{"fields":{"slug":"/","title":"Technology Learning"}}},{"node":{"fields":{"slug":"/kubernetes/02-kubecost-integration-with-kubernetes","title":"What is Kubecost and how to integrate kubecost with kubernetes"}}},{"node":{"fields":{"slug":"/pages/about-me","title":"Vishnu Sunkari"}}},{"node":{"fields":{"slug":"/aws/16-aws-savings-plans","title":"AWS Savings Plans"}}}]}},"pageContext":{"id":"19a6b28a-88b2-5cf9-b4ff-b7fef10a00f9"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}