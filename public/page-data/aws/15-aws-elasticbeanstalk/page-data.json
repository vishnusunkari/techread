{"componentChunkName":"component---src-templates-docs-js","path":"/aws/15-aws-elasticbeanstalk","result":{"data":{"site":{"siteMetadata":{"title":"TechGry","docsLocation":""}},"mdx":{"fields":{"id":"6791769d-dc5d-5883-9a09-f7a613f4bd97","title":"Elastic Beanstalk","slug":"/aws/15-aws-elasticbeanstalk"},"body":"var _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Elastic Beanstalk\",\n  \"metaTitle\": \"Elastic Beanstalk\",\n  \"metaDescription\": \"What is AWS Elastic Beanstalk? Application, Environment, Application Version, Rolling deployments, All at once deployments,  Configuration presets, Creation of RDS Database instances \"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"Elastic Beanstalk (Platform as a Service)\"), mdx(\"h3\", null, \"Application\"), mdx(\"p\", null, \"At the Base level is Application.  Container of environments, versions, environment configs.   \"), mdx(\"h3\", null, \"Environment\"), mdx(\"p\", null, \"An environment of a given tier(web server / worker batch jobs).\"), mdx(\"h3\", null, \"Application Version\"), mdx(\"p\", null, \"Distinct Version of application, eg: ApplicationName-V1.jar).    \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"In the background it uses CloudFormation.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Supports Blue-Green Deployments natively.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Recommended to deploy databases outside of Beanstalk as the data can be deleted when the environment is removed.  \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"eb-extensions folder inside Application Versions to allow config info to connect to SQS or other etc.  \")), mdx(\"p\", null, \"AWS Elastic Beanstalk provides several options for how deployments are processed, including deployment\\npolicies (All at once, Rolling, Rolling with additional batch, and Immutable) and options that let you\\nconfigure batch size and health check behavior during deployments.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"By default, your environment uses :\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Rolling deployments if you created it with the console or EB CLI, or \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"All-at-once deployments if you created it with a different client (API, SDK, or AWS CLI).   \")), mdx(\"p\", null, \"Beanstalk takes care :\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Provisioning\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Capacity Provisioning\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Autoscaling\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Load-balancing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Application Health Monitoring.     \")), mdx(\"p\", null, \"To alter application settings and software configurations that run on the EC2 instances\\ncreated by Elastic Beanstalk, configuration files can be added to a specifically named\\nfolder in the application code versions, which are applied during the deployment process.   \"), mdx(\"p\", null, \"To use configuration files, a folder named .ebextensions is created at the top level of\\nthe project's source code. Then files with the extension .config are added to specify options.   \"), mdx(\"p\", null, \"Configuration Presets:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Low cost, \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"HA, \"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Custom configuration\")), mdx(\"h3\", null, \"Elastic Beanstalk Creation of RDS DB Instances\"), mdx(\"p\", null, \"Elastic Beanstalk takes care of creating the RDS databased instances automatically,\\nbut since the database hostname is not known until this environment is created, this\\nmay leave you asking, \\\"How will the application know \\\"what to use to connect to the database?\\\"\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"Elastic Beanstalk takes care of this by providing access to such information through\\nenvironment properties. For RDS, it exposes all of the necessary connection parameter\\ninformation to the application as environment properties. These properties are passed\\nin the application when the Elastic Beanstalk creates the environment.\\nSo, the database hostname, DB name, the port, the username, and password can all be\\naccessed through environment variables.   \"), mdx(\"h3\", null, \"Rolling Deployments\"), mdx(\"p\", null, \"With rolling deployments, Elastic Beanstalk splits the environment's EC2 instances into batches and deploys\\nthe new version of the application to one batch at a time, leaving the rest of the instances in the\\nenvironment running the old version of the application. During a rolling deployment, some instances serve\\nrequests with the old version of the application, while instances in completed batches serve other requests\\nwith the new version.\"));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#elastic-beanstalk-platform-as-a-service","title":"Elastic Beanstalk (Platform as a Service)"},{"url":"#application","title":"Application"},{"url":"#environment","title":"Environment"},{"url":"#application-version","title":"Application Version"},{"url":"#elastic-beanstalk-creation-of-rds-db-instances","title":"Elastic Beanstalk Creation of RDS DB Instances"},{"url":"#rolling-deployments","title":"Rolling Deployments"}]},"parent":{"__typename":"File","relativePath":"aws/15-aws-elasticbeanstalk.mdx"},"frontmatter":{"metaTitle":"Elastic Beanstalk","metaDescription":"What is AWS Elastic Beanstalk? Application, Environment, Application Version, Rolling deployments, All at once deployments,  Configuration presets, Creation of RDS Database instances "}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/concepts","title":"RealWorld Concepts"}}},{"node":{"fields":{"slug":"/java","title":"Java"}}},{"node":{"fields":{"slug":"/aws","title":"AWS"}}},{"node":{"fields":{"slug":"/kafka","title":"Kafka Concepts"}}},{"node":{"fields":{"slug":"/kubernetes","title":"Kubernetes Concepts"}}},{"node":{"fields":{"slug":"/pages/about","title":"About TechGry"}}},{"node":{"fields":{"slug":"/pages/terms-and-conditions","title":"Terms and Conditions"}}},{"node":{"fields":{"slug":"/pages/disclaimer","title":"Disclaimer"}}},{"node":{"fields":{"slug":"/kafka/00-what-is-kafka","title":"What is Kafka"}}},{"node":{"fields":{"slug":"/pages/privacypolicy","title":"Privacy Policy"}}},{"node":{"fields":{"slug":"/kafka/02-kafka-brokers","title":"Brokers"}}},{"node":{"fields":{"slug":"/kubernetes/01-more-pods-on-nodes","title":"How to deploy more pods on kubernetes nodes"}}},{"node":{"fields":{"slug":"/kafka/03-kafka-producers","title":"Producers"}}},{"node":{"fields":{"slug":"/kafka/04-kafka-consumers","title":"Kafka Consumers"}}},{"node":{"fields":{"slug":"/kafka/01-kafka-topics-partitions-offsets","title":"Topics,Partitions & Offsets"}}},{"node":{"fields":{"slug":"/kafka/05-kafka-consumer-offsets-delivery","title":"Consumer Offsets and Delivery Semantics"}}},{"node":{"fields":{"slug":"/kafka/09-kafka-how-to-build-distributed-scalable-system","title":"How to build distributed scalable system with Kafka"}}},{"node":{"fields":{"slug":"/kafka/07-kafka-guarantees","title":"Kafka Guarantees"}}},{"node":{"fields":{"slug":"/kafka/08-kafka-concepts-summary","title":"Kafka Concepts Summary"}}},{"node":{"fields":{"slug":"/java/01-java-functional-programming","title":"Functional Programming"}}},{"node":{"fields":{"slug":"/kafka/06-kafka-broker-discovery-zookeeper","title":"Kafka Broker Discovery and Zookeeper"}}},{"node":{"fields":{"slug":"/java/00-java-classloaders","title":"Java ClassLoaders"}}},{"node":{"fields":{"slug":"/concepts/00-rotation-strategy","title":"Rotate Monthly"}}},{"node":{"fields":{"slug":"/concepts/01-apis-security","title":"API Security"}}},{"node":{"fields":{"slug":"/concepts/02-maxLifetime","title":"Fix HikariPool"}}},{"node":{"fields":{"slug":"/concepts/03-access-spring-beans","title":"Spring Beans"}}},{"node":{"fields":{"slug":"/concepts/04-save-queue-data-on-to-disk","title":"Saving Queue Data on to Disk"}}},{"node":{"fields":{"slug":"/aws/01-aws-organizations","title":"AWS Organizations"}}},{"node":{"fields":{"slug":"/aws/03-aws-service-catalog","title":"AWS Service Catalog"}}},{"node":{"fields":{"slug":"/aws/04-aws-systems-manager","title":"AWS Systems Manager"}}},{"node":{"fields":{"slug":"/aws/00-aws-iam","title":"IAM"}}},{"node":{"fields":{"slug":"/aws/02-aws-config","title":"AWS Config"}}},{"node":{"fields":{"slug":"/aws/05-aws-elastic-load-balancing","title":"Elastic Load Balancing"}}},{"node":{"fields":{"slug":"/aws/06-aws-autoscaling","title":"Autoscaling"}}},{"node":{"fields":{"slug":"/aws/07-aws-placement-groups","title":"Placement Groups"}}},{"node":{"fields":{"slug":"/aws/08-aws-cloudfront","title":"CloudFront"}}},{"node":{"fields":{"slug":"/aws/09-aws-route53","title":"Route53"}}},{"node":{"fields":{"slug":"/aws/10-aws-s3","title":"S3"}}},{"node":{"fields":{"slug":"/aws/11-aws-efs","title":"EFS"}}},{"node":{"fields":{"slug":"/aws/15-aws-elasticbeanstalk","title":"Elastic Beanstalk"}}},{"node":{"fields":{"slug":"/aws/14-aws-opsworks","title":"OpsWorks"}}},{"node":{"fields":{"slug":"/aws/13-aws-cloudformation","title":"CloudFormation"}}},{"node":{"fields":{"slug":"/aws/12-aws-rdsaurora","title":"RDS Aurora"}}},{"node":{"fields":{"slug":"/security","title":"Security"}}},{"node":{"fields":{"slug":"/security/01-aws-private-ca-private-key","title":"AWS Private CA Private Key"}}},{"node":{"fields":{"slug":"/kubernetes/02-kubecost-integration-with-kubernetes","title":"What is Kubecost and how to integrate kubecost with kubernetes"}}},{"node":{"fields":{"slug":"/aws/16-aws-savings-plans","title":"AWS Savings Plans"}}},{"node":{"fields":{"slug":"/","title":"Technology Learning"}}},{"node":{"fields":{"slug":"/pages/about-me","title":"Vishnu Sunkari"}}}]}},"pageContext":{"id":"6791769d-dc5d-5883-9a09-f7a613f4bd97"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}